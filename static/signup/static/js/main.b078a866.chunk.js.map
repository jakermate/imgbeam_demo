{"version":3,"sources":["imgbeam.png","logo.svg","Form.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Form","useState","username","setUsername","usernameError","setUsernameError","usernameValid","setUsernameValid","useEffect","check_username","email","setEmail","emailError","setEmailError","emailValid","setEmailValid","fetch","mode","then","res","json","valid","message","password","setPassword","password2","setPassword2","passwordsValid","setPasswordsValid","passwordsError","setPasswordsError","submit","a","data","method","headers","Accept","body","JSON","stringify","status","console","log","window","location","replace","className","id","style","width","borderRadius","background","class","src","imgbeam","alt","action","htmlFor","UsernameInput","type","onChange","e","target","value","name","placeholder","required","length","Error","Button","onSubmit","onClick","disabled","href","color","props","ErrorContainer","left","whiteSpace","styled","input","fadein","keyframes","div","button","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.b078a866.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/imgbeam.4803f613.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from \"react\"\nimport styled, { keyframes } from \"styled-components\"\nimport imgbeam from \"./imgbeam.png\"\nexport default function Form() {\n  // all validation should happen server side\n\n  const [username, setUsername] = useState(\"\")\n  const [usernameError, setUsernameError] = useState(\"\")\n  const [usernameValid, setUsernameValid] = useState(false)\n  useEffect(() => {\n    check_username()\n  }, [username])\n  const [email, setEmail] = useState(\"\")\n  const [emailError, setEmailError] = useState(\"\")\n  const [emailValid, setEmailValid] = useState(false)\n  useEffect(() => {\n    check_email()\n  }, [email])\n  const [password, setPassword] = useState(\"\")\n  const [password2, setPassword2] = useState(\"\")\n  const [passwordsValid, setPasswordsValid] = useState(false)\n  const [passwordsError, setPasswordsError] = useState(\"\")\n  useEffect(() => {\n    checkPassword()\n  }, [password, password2])\n  const check_username = function () {\n    // console.log(\"checking\")\n    fetch(`/checkusername?username=${username}`,\n    {\n      mode:'cors'\n    }\n    )\n      .then((res) => res.json())\n      .then((json) => {\n        setUsernameValid(json.valid)\n        setUsernameError(json.message)\n      })\n  }\n  function check_email() {\n    fetch(`/checkemail?email=${email}`,\n    {\n      mode:'cors'\n    }\n    )\n      .then((res) => res.json())\n      .then((json) => {\n        setEmailValid(json.valid)\n        setEmailError(json.message)\n      })\n  }\n  function checkPassword() {\n    fetch(`/passwordcheck?p1=${password}&p2=${password2}`,\n    {\n      mode:'cors'\n    }\n    ).then((res) =>\n      res.json().then((json) => {\n        // console.log(json)\n        setPasswordsValid(json.valid)\n        setPasswordsError(json.message)\n      })\n    )\n  }\n  async function submit() {\n    try{\n      let data = {\n        username: username,\n        email: email,\n        password: password,\n        password2: password2,\n      }\n      let res = await fetch(\"/signup\", {\n        method: \"post\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      })\n      if (res.status == 409) {\n        console.log(\"Invalid Credentials\")\n        return\n      }\n      if(res.status == 200){\n        console.log(\"Success, redirecting.\")\n        // redirect to login\n        window.location.replace(`/signupsuccess?email=${email}`)\n      }\n      if(res.status == 500){\n        console.log('Server error.')\n      }\n    }\n    catch(err){\n      console.log(err)\n    }\n    \n  }\n  return (\n    <div className=\"mx-auto text-white\">\n      <div\n        id=\"signup-form-panel\"\n        style={{\n          width: \"350px\",\n          borderRadius: \"3px\",\n          background: '#373737'\n        }}\n        className=\"mt-2 bg-white max-w-lg  px-8 py-8\"\n      >\n        <div id=\"logo-container\" class=\"container mx-auto items-center flex justify-center\">\n          {/* <h1 class=\"text-3xl text-center mb-3 font-bold\">\n       imgbeam\n      </h1> */}\n          <img\n            src={imgbeam}\n            alt=\"\"\n            className=\"block mb-3\"\n            style={{\n              width: \"220px\",\n            }}\n          />\n        </div>\n        <div id=\"register-label\" className=\"text-xs font-bold mb-6\">\n          register with email\n        </div>\n        <form\n          action=\"/signup\"\n          method=\"POST\"\n          className=\"flex relative flex-col max-w-2xl mx-auto text-sm mx-6\"\n        >\n          <div className=\"w-full relative\">\n            <label\n              className=\"hidden mb-1 font-bold text-xs text-gray-700\"\n              htmlFor=\"username\"\n            >\n              Username\n            </label>\n            <UsernameInput\n              valid={usernameValid}\n              className=\"border-2 w-full border-gray-300  px-4 py-1 mb-1 bg-gray-300 placeholder-gray-600 focus:bg-gray-100 focus:outline-none \"\n              type=\"text\"\n              onChange={(e) => setUsername(e.target.value)}\n              name=\"username\"\n              value={username}\n              placeholder=\"username\"\n              required\n              style={{\n                borderRadius: \"3px\",\n              }}\n            />\n            <div className=\"absolute right-0 top-0 w-full\">\n              {username.length > 0 && !usernameValid && (\n                <Error message={usernameError}></Error>\n              )}\n            </div>\n          </div>\n          <div className=\"w-full relative\">\n            <label\n              className=\"hidden mb-1 font-bold text-xs text-gray-700\"\n              htmlFor=\"email\"\n            >\n              Email\n            </label>\n            <input\n              className=\"border-2 w-full border-gray-300  px-4 py-1 mb-1 bg-gray-300 placeholder-gray-600 focus:bg-gray-100 focus:outline-none \"\n              type=\"text\"\n              name=\"email\"\n              onChange={(e) => setEmail(e.target.value)}\n              placeholder=\"email\"\n              value={email}\n              required\n              style={{\n                borderRadius: \"3px\",\n              }}\n            />\n            <div className=\"absolute right-0 top-0 w-full\">\n              {email.length > 0 && !emailValid && (\n                <Error message={emailError}></Error>\n              )}\n            </div>\n          </div>\n          <div className=\"w-full relative\">\n            <label\n              className=\"hidden mb-1 font-bold text-xs text-gray-700\"\n              htmlFor=\"password\"\n            >\n              Password\n            </label>\n\n            <input\n              className=\"border-2 w-full border-gray-300  px-4 py-1 mb-1 bg-gray-300 placeholder-gray-600 focus:bg-gray-100 focus:outline-none \"\n              type=\"password\"\n              name=\"password\"\n              value={password}\n              placeholder=\"password\"\n              onChange={(e) => setPassword(e.target.value)}\n              required\n              style={{\n                borderRadius: \"3px\",\n              }}\n            />\n            <div className=\"absolute right-0 top-0 w-full\">\n              {password.length > 0 &&\n                !passwordsValid &&\n                passwordsError !== \"Passwords do not match.\" && (\n                  <Error message={passwordsError}></Error>\n                )}\n            </div>\n          </div>\n          <div className=\"w-full relative\">\n            <label\n              className=\"hidden mb-1 font-bold text-xs text-gray-700\"\n              htmlFor=\"retype-password\"\n            >\n              Confirm Password\n            </label>\n\n            <input\n              className=\"border-2 w-full border-gray-300  px-4 py-1  bg-gray-300 placeholder-gray-600 focus:bg-gray-100 focus:outline-none \"\n              type=\"password\"\n              value={password2}\n              name=\"retype-password\"\n              onChange={(e) => setPassword2(e.target.value)}\n              placeholder=\"retype password\"\n              required\n              style={{\n                borderRadius: \"3px\",\n              }}\n            />\n            <div className=\"absolute right-0 top-0 w-full\">\n              {password2.length > 0 &&\n                !passwordsValid &&\n                passwordsError === \"Passwords do not match.\" && (\n                  <Error message={passwordsError}></Error>\n                )}\n            </div>\n          </div>\n        </form>\n        <Button\n          className=\"px-4 font-bold mt-4 mb-2 py-1 w-full text-white text-sm\"\n          type=\"submit\"\n          onSubmit={(e) => submit()}\n          onClick={(e) => submit()}\n          disabled={!usernameValid || !emailValid || !passwordsValid}\n          style={{\n            borderRadius: \"3px\",\n          }}\n        >\n          Let me in!\n        </Button>\n        <div id=\"warnings\" className=\"text-xs mt-6 mx-6\">\n          By making an account, I agree to the{\" \"}\n          <a href=\"/termsofuse\" className=\"font-bold\" style={{\n            color: '#3498db'\n          }}>\n            terms and conditions\n          </a>{\" \"}\n          set for by <span className=\"font-bold\">imgbeam</span>\n        </div>\n      </div>\n\n      <div\n        id=\"or-sign-in\"\n        className=\"w-full mb-6 flex flex-col justify-center items-center\"\n      >\n        <div className=\"text-xs mb-2 mt-4\">already have a imgbeam account?</div>\n        <a href=\"/login\" className=\" font-bold text-sm\" style={{\n          color: '#3498db'\n        }}>\n          Log In\n        </a>\n      </div>\n    </div>\n  )\n}\n\n// error tag\nfunction Error(props) {\n  return (\n    <ErrorContainer\n      className=\"absolute font-bold px-4 py-1 bg-red-400 text-white\"\n      style={{\n        left: \"100%\",\n        whiteSpace: \"nowrap\",\n      }}\n    >\n      {props.message}\n    </ErrorContainer>\n  )\n}\n\nconst UsernameInput = styled.input`\n  /* border-color: ${(props) => (props.valid ? \"green\" : \"red\")}; */\n  &:focus {\n    border-color: rgba(99, 179, 237);\n  }\n`\nconst fadein = keyframes`\n  from{\n    opacity: 0;\n    transform: scale(1.6) translateX(0px);\n  }\n  to{\n    opacity: 1;\n    transform: scale(1) translateX(40px);\n  }\n`\nconst ErrorContainer = styled.div`\n  animation: ${fadein} 0.2s cubic-bezier(0.68, -0.6, 0.32, 1.6) forwards;\n`\nconst Button = styled.button`\n  background: #3498db;\n  opacity: ${(props) => (props.disabled ? 0.2 : 1)};\n`\n","import React, {useEffect, useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport './css/main.css'\nimport Form from './Form'\nfunction App() {\n  \n  return (\n    <div className=\"App pt-12\">\n      <Form></Form>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}