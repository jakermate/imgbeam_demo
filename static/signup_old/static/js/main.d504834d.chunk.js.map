{"version":3,"sources":["logo.svg","Form.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Form","useState","username","setUsername","usernameError","setUsernameError","usernameValid","setUsernameValid","useEffect","check_username","email","setEmail","emailError","setEmailError","emailValid","setEmailValid","fetch","then","res","json","valid","message","password","setPassword","password2","setPassword2","passwordsValid","setPasswordsValid","passwordsError","setPasswordsError","submit","data","method","headers","body","JSON","stringify","success","console","log","window","location","replace","className","id","style","minWidth","action","htmlFor","UsernameInput","type","onChange","e","target","value","name","placeholder","required","length","Error","href","class","Button","onSubmit","onClick","disabled","props","ErrorContainer","left","whiteSpace","styled","input","fadein","keyframes","div","button","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.d504834d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from \"react\"\nimport styled, { keyframes } from \"styled-components\"\nexport default function Form() {\n  // all validation should happen server side\n\n  const [username, setUsername] = useState(\"\")\n  const [usernameError, setUsernameError] = useState(\"\")\n  const [usernameValid, setUsernameValid] = useState(false)\n  useEffect(() => {\n    check_username()\n  }, [username])\n  const [email, setEmail] = useState(\"\")\n  const [emailError, setEmailError] = useState(\"\")\n  const [emailValid, setEmailValid] = useState(false)\n  useEffect(() => {\n    check_email()\n  }, [email])\n  const [password, setPassword] = useState(\"\")\n  const [password2, setPassword2] = useState(\"\")\n  const [passwordsValid, setPasswordsValid] = useState(false)\n  const [passwordsError, setPasswordsError] = useState('')\n  useEffect(() => {\n    checkPassword()\n  }, [password, password2])\n  const check_username = function () {\n    // console.log(\"checking\")\n    fetch(`/checkusername?username=${username}`)\n      .then((res) => res.json())\n      .then((json) => {\n        setUsernameValid(json.valid)\n        setUsernameError(json.message)\n      })\n  }\n  function check_email() {\n    fetch(`/checkemail?email=${email}`)\n      .then((res) => res.json())\n      .then((json) => {\n        setEmailValid(json.valid)\n        setEmailError(json.message)\n      })\n  }\n  function checkPassword(){\n    fetch(`/passwordcheck?p1=${password}&p2=${password2}`).then(res=>res.json().then(json=>{\n      // console.log(json)\n      setPasswordsValid(json.valid)\n      setPasswordsError(json.message)\n    }))\n  }\n  function submit(){\n    let data = {\n      username: username,\n      email: email,\n      password: password,\n      password2: password2\n    }\n    fetch('/signup', {\n      method: 'post',\n      headers: {\n        'Accept': 'application/json',\n      'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    }).then(res=>res.json()).then(json=>{\n      if(!json.success){\n        console.log('Error during signup.')\n        return\n      }\n      console.log('Success, redirecting.')\n      // redirect to login\n      window.location.replace('/login')\n    })\n  }\n  return (\n    <div className=\"mx-auto\">\n      <div\n        id=\"signup-form-panel\"\n        style={{ minWidth: \"330px\" }}\n        className=\"text-black border-2 mt-2 bg-white max-w-lg rounded-md px-6 py-8\"\n      >\n        <form\n          action=\"/signup\"\n          method=\"POST\"\n          className=\"flex relative flex-col max-w-2xl mx-auto text-sm mx-6\"\n        >\n          <div className=\"w-full relative\">\n            <label\n              className=\"hidden mb-1 font-bold text-xs text-gray-700\"\n              htmlFor=\"username\"\n            >\n              Username\n            </label>\n            <UsernameInput\n              valid={usernameValid}\n              className=\"border-2 w-full border-gray-300 rounded-md px-4 py-2 mb-4 bg-gray-300 placeholder-gray-600 focus:bg-gray-100 focus:outline-none \"\n              type=\"text\"\n              onChange={(e) => setUsername(e.target.value)}\n              name=\"username\"\n              value={username}\n              placeholder=\"username\"\n              required\n            />\n            <div className=\"absolute right-0 top-0 w-full\">\n              {username.length > 0 && !usernameValid && (\n                <Error message={usernameError}></Error>\n              )}\n            </div>\n          </div>\n          <div className=\"w-full relative\">\n            <label\n              className=\"hidden mb-1 font-bold text-xs text-gray-700\"\n              htmlFor=\"email\"\n            >\n              Email\n            </label>\n            <input\n              className=\"border-2 w-full border-gray-300 rounded-md px-4 py-2 mb-4 bg-gray-300 placeholder-gray-600 focus:bg-gray-100 focus:outline-none \"\n              type=\"text\"\n              name=\"email\"\n              onChange={(e) => setEmail(e.target.value)}\n              placeholder=\"email\"\n              value={email}\n              required\n            />\n            <div className=\"absolute right-0 top-0 w-full\">\n              {email.length > 0 && !emailValid && (\n                <Error message={emailError}></Error>\n              )}\n            </div>\n          </div>\n          <div className=\"w-full relative\">\n            <label\n              className=\"hidden mb-1 font-bold text-xs text-gray-700\"\n              htmlFor=\"password\"\n            >\n              Password\n            </label>\n\n            <input\n              className=\"border-2 w-full border-gray-300 rounded-md px-4 py-2 mb-4 bg-gray-300 placeholder-gray-600 focus:bg-gray-100 focus:outline-none \"\n              type=\"password\"\n              name=\"password\"\n              value={password}\n              placeholder=\"password\"\n              onChange={(e) => setPassword(e.target.value)}\n              required\n            />\n            <div className=\"absolute right-0 top-0 w-full\">\n              {password.length > 0 && !passwordsValid && passwordsError !== \"Passwords do not match.\" && (\n                <Error message={passwordsError}></Error>\n              )}\n            </div>\n          </div>\n          <div className=\"w-full relative\">\n            <label\n              className=\"hidden mb-1 font-bold text-xs text-gray-700\"\n              htmlFor=\"retype-password\"\n            >\n              Confirm Password\n            </label>\n\n            <input\n              className=\"border-2 w-full border-gray-300 rounded-md px-4 py-2  bg-gray-300 placeholder-gray-600 focus:bg-gray-100 focus:outline-none \"\n              type=\"password\"\n              value={password2}\n              name=\"retype-password\"\n              onChange={(e) => setPassword2(e.target.value)}\n              placeholder=\"retype password\"\n              required\n            />\n            <div className=\"absolute right-0 top-0 w-full\">\n              {password2.length > 0 && !passwordsValid && passwordsError === 'Passwords do not match.' && (\n                <Error message={passwordsError}></Error>\n              )}\n            </div>\n          </div>\n        </form>\n        <div id=\"warnings\" className=\"text-xs mt-6 mx-6\">\n          By making an account, I agree to the <a href=\"/terms\" className=\"text-green-500 font-bold\">terms and conditions</a> set for by <span class=\"text-red-400 font-bold\">pi</span><span class=\"text-green-400 font-bold\">xi</span><span class=\"text-blue-400 font-bold\">gi</span>.\n        </div>\n      </div>\n      <Button\n        className=\"px-4 font-bold mt-4 mb-4 py-2 bg-green-400 w-full text-white rounded-md\"\n        type=\"submit\"\n        onSubmit={e=>submit()}\n        onClick={e=>submit()}\n        disabled={!usernameValid || !emailValid || !passwordsValid}\n      >\n        yeet me!\n      </Button>\n      <div\n        id=\"or-sign-in\"\n        className=\"w-full mb-6 flex flex-col justify-center items-center\"\n      >\n        <div className=\"text-xs mb-2 mt-4\">already have a pixigi account?</div>\n        <a href=\"/login\" className=\"text-green-400 font-bold text-sm\">\n          Log In\n        </a>\n      </div>\n    </div>\n  )\n}\n\n// error tag\nfunction Error(props) {\n  return (\n    <ErrorContainer\n      className=\"absolute font-bold rounded-md px-4 py-2 bg-red-400 text-white\"\n      style={{\n        left: \"100%\",\n        whiteSpace: \"nowrap\",\n      }}\n    >\n      {props.message}\n    </ErrorContainer>\n  )\n}\n\nconst UsernameInput = styled.input`\n  /* border-color: ${(props) => (props.valid ? \"green\" : \"red\")}; */\n  &:focus {\n    border-color: rgba(99, 179, 237);\n  }\n`\nconst fadein = keyframes`\n  from{\n    opacity: 0;\n    transform: scale(1.6) translateX(0px);\n  }\n  to{\n    opacity: 1;\n    transform: scale(1) translateX(40px);\n  }\n`\nconst ErrorContainer = styled.div`\n  animation: ${fadein} 0.2s cubic-bezier(0.68, -0.6, 0.32, 1.6) forwards;\n`\nconst Button = styled.button`\n  opacity: ${props=>props.disabled ? .5 : 1}\n`","import React, {useEffect, useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport './css/main.css'\nimport Form from './Form'\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <Form></Form>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}