{"version":3,"sources":["logo.svg","Form.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Form","id","class","action","method","style","background","width","type","name","placeholder","className","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yIAAAA,EAAOC,QAAU,IAA0B,kC,kICE5B,SAASC,IACtB,OACE,yBACEC,GAAG,iBACHC,MAAM,oFAEN,0BACEC,OAAO,SACPC,OAAO,OACPF,MAAM,mCAEN,yBACED,GAAG,mBACHC,MAAM,qCACNG,MAAO,CACLC,WAAY,OACZC,MAAO,UAGT,2BACEL,MAAM,8CACNM,KAAK,OACLC,KAAK,WACLC,YAAY,aAEd,2BACER,MAAM,yCACNM,KAAK,WACLC,KAAK,WACLC,YAAY,cAGhB,yBAAKT,GAAG,2BACN,4BACEC,MAAM,yDACNM,KAAK,UAFP,SAMA,yBAAKN,MAAM,kDACT,yBAAKA,MAAM,sBAAX,gBACe,0BAAMS,UAAU,0BAAhB,KACb,0BAAMA,UAAU,4BAAhB,KACA,0BAAMA,UAAU,2BAAhB,KAHF,iBAKA,uBAAGC,KAAK,UAAUV,MAAM,yCAAxB,gBCZGW,MA9Bf,WACE,OACE,yBACEF,UAAU,uDACVN,MAAO,CAAEC,WAAY,YAErB,yBAAKL,GAAG,gBAAgBU,UAAU,oBAAoBN,MAAO,CAC3DE,MAAM,UAEN,yBAAKL,MAAM,eACT,wBAAIA,MAAM,2BACR,0BAAMS,UAAU,gBAAhB,KACA,0BAAMA,UAAU,kBAAhB,KACA,0BAAMA,UAAU,iBAAhB,KAHF,SAOF,yBAAKV,GAAG,WAAWU,UAAU,gBAA7B,WAGA,kBAACX,EAAD,OAGF,yBAAKW,UAAU,uCACb,uBAAGC,KAAK,eAAR,mBCjBYE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d00052cd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect } from \"react\"\n\nexport default function Form() {\n  return (\n    <div\n      id=\"form-container\"\n      class=\"flex container mx-auto max-w-2xl flex-col justify-center align-center text-black\"\n    >\n      <form\n        action=\"/login\"\n        method=\"POST\"\n        class=\"flex flex-col max-w-2xl mx-auto\"\n      >\n        <div\n          id=\"login-form-panel\"\n          class=\"rounded-md px-4 py-4 flex flex-col\"\n          style={{\n            background: \"#eee\",\n            width: '300px'\n          }}\n        >\n          <input\n            class=\" border-gray-300  rounded-md px-4 py-2 mb-4\"\n            type=\"text\"\n            name=\"username\"\n            placeholder=\"username\"\n          />\n          <input\n            class=\" border-gray-300  rounded-md px-4 py-2\"\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"password\"\n          />\n        </div>\n        <div id=\"login-control-sub-panel\">\n          <button\n            class=\"px-4 mt-6 mb-8 py-2 bg-green-500 text-white rounded-md\"\n            type=\"submit\"\n          >\n            Login\n          </button>\n          <div class=\"flex mt-4 flex-col justify-center items-center\">\n            <div class=\"text-xs text-white\">\n              Don't have a <span className=\"text-red-400 font-bold\">i</span>\n              <span className=\"text-green-400 font-bold\">m</span>\n              <span className=\"text-blue-400 font-bold\">g</span>beam account?\n            </div>\n            <a href=\"/signup\" class=\"text-sm text-green-500 font-bold mt-3\">\n              Register\n            </a>\n          </div>\n        </div>\n      </form>\n    </div>\n  )\n}\n","import React from \"react\"\nimport logo from \"./logo.svg\"\nimport \"./App.css\"\nimport \"../src/css/main.css\"\nimport Form from \"./Form\"\nfunction App() {\n  return (\n    <div\n      className=\"App text-white flex flex-col h-screen justify-center\"\n      style={{ background: \"#232323\" }}\n    >\n      <div id=\"login-content\" className=\"max-w-3xl mx-auto\" style={{\n        width:'330px'\n      }}>\n        <div class=\"text-center\">\n          <h2 class=\"text-5xl font-bold mb-6\">\n            <span className=\"text-red-400\">i</span>\n            <span className=\"text-green-400\">m</span>\n            <span className=\"text-blue-400\">g</span>\n            beam\n          </h2>\n        </div>\n        <div id=\"subtitle\" className=\"mb-2 text-xs\">\n          sign in\n        </div>\n        <Form></Form>\n       \n      </div>\n      <div className=\"absolute bottom-0 right-0 mb-2 mr-4\">\n        <a href=\"/termsofuse\">terms of use</a>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}